/*
 Navicat Premium Data Transfer

 Source Server         : 阿里云1核2g
 Source Server Type    : MySQL
 Source Server Version : 50732
 Source Host           : 39.100.79.234:3306
 Source Schema         : semanticui_blog

 Target Server Type    : MySQL
 Target Server Version : 50732
 File Encoding         : 65001

 Date: 21/02/2021 13:06:34
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for hibernate_sequence
-- ----------------------------
DROP TABLE IF EXISTS `hibernate_sequence`;
CREATE TABLE `hibernate_sequence`  (
  `next_val` bigint(20) NULL DEFAULT NULL
) ENGINE = MyISAM CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = FIXED;

-- ----------------------------
-- Records of hibernate_sequence
-- ----------------------------
INSERT INTO `hibernate_sequence` VALUES (31);
INSERT INTO `hibernate_sequence` VALUES (31);
INSERT INTO `hibernate_sequence` VALUES (31);
INSERT INTO `hibernate_sequence` VALUES (31);
INSERT INTO `hibernate_sequence` VALUES (31);

-- ----------------------------
-- Table structure for t_blog
-- ----------------------------
DROP TABLE IF EXISTS `t_blog`;
CREATE TABLE `t_blog`  (
  `id` bigint(20) NOT NULL,
  `appreciation` bit(1) NOT NULL,
  `commentabled` bit(1) NOT NULL,
  `content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `create_time` datetime(0) NULL DEFAULT NULL,
  `first_picture` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `flag` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `published` bit(1) NOT NULL,
  `recommend` bit(1) NOT NULL,
  `share_statement` bit(1) NOT NULL,
  `title` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `update_time` datetime(0) NULL DEFAULT NULL,
  `views` int(11) NULL DEFAULT NULL,
  `type_id` bigint(20) NULL DEFAULT NULL,
  `user_id` bigint(20) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `FK292449gwg5yf7ocdlmswv9w4j`(`type_id`) USING BTREE,
  INDEX `FK8ky5rrsxh01nkhctmo7d48p82`(`user_id`) USING BTREE
) ENGINE = MyISAM CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of t_blog
-- ----------------------------
INSERT INTO `t_blog` VALUES (8, b'1', b'1', '## springboot-elasticsearch\r\n\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-elasticsearch</artifactId>\r\n</dependency>\r\n```\r\n\r\n```java\r\n/**\r\n * 9200rest端口,tcp9300端口\r\n */\r\n@Configuration\r\npublic class RestClientConfig extends AbstractElasticsearchConfiguration {\r\n    @Bean\r\n    public RestHighLevelClient elasticsearchClient(){\r\n\r\n        final ClientConfiguration clientConfiguration = ClientConfiguration.builder()\r\n                .connectedTo(\"192.168.149.129:9200\")\r\n                .build();\r\n        return RestClients.create(clientConfiguration).rest();\r\n    }\r\n}\r\n```\r\n### restHighLevelClient\r\n\r\n```java\r\n@SpringBootTest\r\npublic class TestRestClient {\r\n    @Resource\r\n    private RestHighLevelClient restHighLevelClient;   //复杂查询使用\r\n\r\n    //ElasticSearchRepository接口面向对象,提供系列crud方法\r\n\r\n    @Test\r\n    public void test() throws IOException {\r\n        DeleteRequest deleteRequest = new DeleteRequest(\"ems\", \"emp\", \"1\");\r\n        DeleteResponse deleteResponse = restHighLevelClient.delete(deleteRequest, RequestOptions.DEFAULT);\r\n        System.out.println(\"delete = \" + deleteResponse.status());\r\n    }\r\n\r\n    @Test\r\n    public void testAddIndex() throws IOException {\r\n        IndexRequest indexRequest = new IndexRequest(\"ems\",\"emp\",\"1\");\r\n        indexRequest.source(\"{\\\"name\\\": \\\"小小黑\\\",\\n\" +\r\n                \"   \\\"age\\\": 59,\\n\" +\r\n                \"   \\\"bir\\\": \\\"2012-12-12\\\",\\n\" +\r\n                \"   \\\"content\\\":\\\"这是一个模式，框架，掩码\\\",\\n\" +\r\n                \"    \\\"address\\\":\\\"上海\\\"}\", XContentType.JSON);\r\n        IndexResponse indexResponse = restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\r\n        System.out.println(\"indexResponse = \" + indexResponse.status());\r\n    }\r\n\r\n  @Test\r\n    public  void testQuery() throws IOException {\r\n        SearchRequest searchRequest = new SearchRequest(\"ems\");\r\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\r\n        searchSourceBuilder.query(QueryBuilders.matchAllQuery())//执行条件\r\n                           .from(0)\r\n                           .size(20)\r\n                           .postFilter(QueryBuilders.matchAllQuery())\r\n                           .sort(\"age\", SortOrder.DESC)\r\n                           .highlighter(new HighlightBuilder().field(\"*\").requireFieldMatch(false));\r\n        //创建搜素请求\r\n        searchRequest.types(\"emp\").source(searchSourceBuilder);\r\n        SearchResponse search = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\r\n        SearchHit[] hits = search.getHits().getHits();\r\n        for (SearchHit hit : hits) {\r\n            System.out.println(\"hit = \" + hit);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### ElasticSearchRepository面向对象\r\n\r\n>  entity.emp\r\n\r\n```java\r\n@Data\r\n/**\r\n * 用在类上，将emp对象映射成es文档\r\n *  indexName :索引名   要求es服务器中不能存在此索引名\r\n *  type : 当前索引下创建类型\r\n *\r\n */\r\n@Document(indexName = \"ems\",type = \"emp\")\r\npublic class Emp {\r\n    @Id  //将对象中的id属性与文档中_id一一对应\r\n    private String id;\r\n    //用在属性上代表mapping上的一个字段,type指定字段类型\r\n    @Field(type = FieldType.Text,analyzer = \"ik_max_word\")\r\n    private String name;\r\n    @Field(type = FieldType.Integer)\r\n    private Integer age;\r\n    @Field(type = FieldType.Date)\r\n    private Date bir;\r\n    @Field(type = FieldType.Text,analyzer = \"ik_max_word\")\r\n    private String content;\r\n    @Field(type = FieldType.Text,analyzer = \"ik_max_word\")\r\n    private String address;\r\n}\r\n```\r\n\r\n```java\r\n@SpringBootTest\r\npublic class TestEmpRepository {\r\n    @Autowired\r\n    private EmpRepository empRepository;\r\n\r\n    //save保存:更新一条文档，id相同更新，不更新部分必须与原始文档相同\r\n    @Test\r\n    public void testSave(){\r\n        Emp a = new Emp();\r\n        a.setId(UUID.randomUUID().toString());\r\n        a.setName(\"张三\");\r\n        a.setBir(new Date());\r\n        a.setAge(25);\r\n        a.setAddress(\"武当山学院\");\r\n        a.setContent(\"武侠大师，一生创建多种武功，如太极，武当剑法\");\r\n        empRepository.save(a);\r\n    }\r\n    @Test\r\n    public void testDelete(){\r\n        empRepository.deleteById(\"175e1ca8-26ca-4e0a-9476-c40e7630fd49\");\r\n    }\r\n\r\n    //删除所有文档\r\n    @Test\r\n    public void testDeleteAll(){\r\n        empRepository.deleteAll();\r\n    }\r\n\r\n    //检索一条记录\r\n    @Test\r\n    public void testFindOne(){\r\n        Optional<Emp> optional = empRepository.findById(\"fa71e070-58b5-400c-bc1f-e93add9b11fe\");\r\n        System.out.println(\"optional = \" + optional.get());\r\n    }\r\n\r\n    //查询所有,排序\r\n    @Test\r\n    public void testFindAll(){\r\n        Iterable<Emp> empRepositoryAll = empRepository.findAll(Sort.by(Sort.Order.desc(\"age\")));\r\n        empRepositoryAll.forEach(emp-> System.out.println(\"emp = \" + emp));\r\n    }\r\n\r\n    //分页\r\n    @Test\r\n    public void testFindPage(){\r\n        //参数0 ，当前页减1\r\n        Iterable<Emp> empRepositoryAll = empRepository.search(QueryBuilders.matchAllQuery(), PageRequest.of(0,20));\r\n        empRepositoryAll.forEach(emp-> System.out.println(\"emp = \" + emp));\r\n    }\r\n}\r\n\r\n```\r\n\r\n', '2020-09-22 13:57:45', 'http://www.ruanyifeng.com/blogimg/asset/2017/bg2017081701.jpg', '原创', b'1', b'1', b'1', 'springboot操作elasticsearch部分操作', '2020-09-22 13:57:45', 3, 5, 1);
INSERT INTO `t_blog` VALUES (9, b'1', b'1', '## java客户端操作ES\r\n\r\n```xml\r\n        <dependency>\r\n            <groupId>org.elasticsearch</groupId>\r\n            <artifactId>elasticsearch</artifactId>\r\n            <version>6.8.0</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.elasticsearch.client</groupId>\r\n            <artifactId>transport</artifactId>\r\n            <version>6.8.0</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.elasticsearch.plugin</groupId>\r\n            <artifactId>transport-netty4-client</artifactId>\r\n            <version>6.8.0</version>\r\n        </dependency>\r\n```\r\n\r\n```java\r\npublic class TestDocument {\r\n\r\n    private TransportClient transportClient;\r\n\r\n    @Before\r\n    public void before() throws UnknownHostException {\r\n        //创建客户端\r\n        this.transportClient = new PreBuiltTransportClient(Settings.EMPTY);\r\n        //设置操作es的主机和端口\r\n        transportClient.addTransportAddress(new TransportAddress(InetAddress.getByName(\"192.168.149.129\"),9300));\r\n    }\r\n    @After\r\n    public void after(){\r\n        transportClient.close();\r\n    }\r\n\r\n    //添加文档\r\n    @Test\r\n    public  void testCreate(){\r\n\r\n        User user=new User(\"1\",\"小红\",23,new Date(),\"我们在疫情下努力学习\",\"上海\");\r\n        \r\n        //转为json\r\n        String json = JSONObject.toJSONString(user);\r\n\r\n        IndexResponse indexResponse = transportClient.prepareIndex(\"ems\", \"emp\", user.getId()).setSource(json, XContentType.JSON).get();\r\n\r\n        System.out.println(\"indexResponse = \" + indexResponse.status());\r\n\r\n    }\r\n\r\n    //添加文档(自动id)\r\n    @Test\r\n    public  void testCreateAutoId(){\r\n\r\n        User user=new User(null,\"小羊\",28,new Date(),\"我们在疫情下好好听课\",\"南京\");\r\n\r\n        //转为json\r\n        String json = JSONObject.toJSONString(user);\r\n\r\n        IndexResponse indexResponse = transportClient.prepareIndex(\"ems\", \"emp\").setSource(json, XContentType.JSON).get();\r\n\r\n        System.out.println(\"indexResponse = \" + indexResponse.status());\r\n    }\r\n\r\n    //更新文档\r\n    @Test\r\n    public  void testUpdate(){\r\n        User user = new User();\r\n        user.setContent(\"我们在疫情下学习框架\");\r\n        user.setBir(new Date());\r\n        //转为json\r\n        String json = JSONObject.toJSONStringWithDateFormat(user,\"yyyy-MM-dd\");\r\n\r\n        UpdateResponse updateResponse = transportClient.prepareUpdate(\"ems\", \"emp\", \"1\").setDoc(json, XContentType.JSON).get();\r\n\r\n        System.out.println(\"indexResponse = \" + updateResponse.status());\r\n    }\r\n}\r\n\r\n\r\n    //删除文档\r\n    @Test\r\n    public  void testDelete(){\r\n        DeleteResponse deleteResponse = transportClient.prepareDelete(\"ems\", \"emp\", \"YiJTXnQBEtzuYn29C38i\").get();\r\n        System.out.println(\"deleteResponse = \" + deleteResponse.status());\r\n    }\r\n\r\n    //查询一条文档\r\n    @Test\r\n    public  void testFindOne() throws ParseException {\r\n        GetResponse getResponse = transportClient.prepareGet(\"ems\", \"emp\", \"1\").get();\r\n        System.out.println(\"deleteResponse = \" + getResponse.getSourceAsString());\r\n        Map<String,Object> sourceAsMap = getResponse.getSourceAsMap();\r\n        User user = new User();\r\n        user.setId(sourceAsMap.get(\"id\").toString());\r\n        user.setBir(new SimpleDateFormat(\"yyyy-MM-dd\").parse(sourceAsMap.get(\"bir\").toString()));\r\n        System.out.println(\"user = \" + user);\r\n    }\r\n}\r\n\r\n    //各种查询，查询所有\r\n    @Test\r\n    public void testSearch(){\r\n        //查询条件\r\n        MatchAllQueryBuilder matchAllQueryBuilder = QueryBuilders.matchAllQuery();\r\n        SearchResponse searchResponse = transportClient.prepareSearch(\"ems\")\r\n                .setTypes(\"emp\")   // 指定类型\r\n                .setQuery(matchAllQueryBuilder)  //指定查询条件\r\n                .get();//执行查询\r\n\r\n        System.out.println(\"总条数\"+searchResponse.getHits().getTotalHits());\r\n        System.out.println(\"最大得分\"+searchResponse.getHits().getMaxScore());\r\n        SearchHit[] hits = searchResponse.getHits().getHits();\r\n        for (SearchHit hit : hits) {\r\n            System.out.println(\"hit = \" + hit.getSourceAsString());\r\n        }\r\n    }\r\n\r\n  //termQuery\r\n    @Test\r\n    public void testQuery(){\r\n        TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(\"content\", \"框架\");\r\n        SearchResponse searchResponse = transportClient.prepareSearch(\"ems\")\r\n                .setTypes(\"emp\")\r\n                .setQuery(termQueryBuilder)\r\n                .get();\r\n\r\n        SearchHit[] hits = searchResponse.getHits().getHits();\r\n        for (SearchHit hit : hits) {\r\n            System.out.println(\"hit = \" + hit);\r\n        }\r\n    }\r\n\r\n    //批量操作\r\n    @Test\r\n    public void testBulk(){\r\n        User user = new User(\"12\",\"张三丰\",23,new Date(),\"太极拳创始人\",\"武当山\");\r\n        //添加\r\n        IndexRequest indexRequest = new IndexRequest(\"ems\",\"emp\",user.getId()).source(JSONObject.toJSONStringWithDateFormat(user,\"yyyy-MM-dd\"),XContentType.JSON);\r\n        //删除\r\n        DeleteRequest deleteRequest = new DeleteRequest(\"ems\",\"emp\",\"YSJSXnQBEtzuYn29oH92\");\r\n        //修改\r\n        User user1 = new User();\r\n        user1.setContent(\"这是一个修改后的spring框架\");\r\n        UpdateRequest updateRequest = new UpdateRequest(\"ems\",\"emp\",\"YyJTXnQBEtzuYn29Vn9m\").doc(JSONObject.toJSONString(user1),XContentType.JSON);\r\n        //返回批量更新对象\r\n        BulkRequestBuilder bulkRequestBuilder = transportClient.prepareBulk();\r\n\r\n        BulkResponse bulkItemResponses = bulkRequestBuilder.add(indexRequest).add(deleteRequest).add(updateRequest).get();\r\n\r\n        for (BulkItemResponse bulkItemRespons : bulkItemResponses) {\r\n            System.out.println(\"bulkItemRespons = \" + bulkItemRespons.status());\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Query\r\n\r\n```java\r\npublic class TestDocument {\r\n    private TransportClient transportClient;\r\n\r\n    @Before\r\n    public void before() throws UnknownHostException {\r\n        //创建客户端\r\n        this.transportClient = new PreBuiltTransportClient(Settings.EMPTY);\r\n        //设置操作es的主机和端口\r\n        transportClient.addTransportAddress(new TransportAddress(InetAddress.getByName(\"192.168.149.129\"),9300));\r\n    }\r\n    @After\r\n    public void after(){\r\n        transportClient.close();\r\n    }\r\n\r\n    @Test\r\n    public  void testQuery(){\r\n        //查询所有\r\n        MatchAllQueryBuilder matchAllQueryBuilder = QueryBuilders.matchAllQuery();\r\n        //termQuery\r\n        TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(\"content\",\"太极\");\r\n        //rangeQuery\r\n        RangeQueryBuilder rangeQueryBuilder = QueryBuilders.rangeQuery(\"age\").gte(0).lte(25);\r\n        //wildcardQuery 通配符\r\n        WildcardQueryBuilder wildcardQueryBuilder = QueryBuilders.wildcardQuery(\"content\", \"框?\");\r\n        //prefixQuery前缀查询\r\n        PrefixQueryBuilder prefixQueryBuilder = QueryBuilders.prefixQuery(\"content\", \"框\");\r\n        //ids 查询\r\n        IdsQueryBuilder idsQueryBuilder = QueryBuilders.idsQuery().addIds(\"12\").addIds(\"YyJTXnQBEtzuYn29Vn9m\");\r\n        //fuzz模糊查询\r\n        FuzzyQueryBuilder fuzzyQueryBuilder = QueryBuilders.fuzzyQuery(\"content\", \"框架\");\r\n        //bool query\r\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery().must(QueryBuilders.termQuery(\"content\", \"spring\"));\r\n\r\n        //调用方法\r\n        testResult(idsQueryBuilder);\r\n\r\n    }\r\n\r\n    //用来输出搜索结果\r\n    public void testResult(QueryBuilder queryBuilder){\r\n        SearchResponse searchResponse = transportClient.prepareSearch(\"ems\")\r\n                .setTypes(\"emp\")\r\n                .setQuery(queryBuilder)\r\n                .setFrom(0) //起始条数\r\n                .setSize(20) //设置每页展示条数\r\n               // .setSource(SearchSourceBuilder.searchSource().fetchSource(\"*\",\"age\"))   执行结果中返回哪些字段\r\n                .addSort(\"age\", SortOrder.DESC)  //设置降序排序，asc为升序\r\n                .get();\r\n\r\n        System.out.println(\"总条数\"+searchResponse.getHits().getTotalHits());\r\n        System.out.println(\"最大得分\"+searchResponse.getHits().getMaxScore());\r\n        SearchHit[] hits = searchResponse.getHits().getHits();\r\n        for (SearchHit hit : hits) {\r\n            System.out.println(\"hit = \" + hit);\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\n> 高亮查询\r\n\r\n```java\r\npublic class TestDocumentHight {\r\n    private TransportClient transportClient;\r\n\r\n    @Before\r\n    public void before() throws UnknownHostException {\r\n        //创建客户端\r\n        this.transportClient = new PreBuiltTransportClient(Settings.EMPTY);\r\n        //设置操作es的主机和端口\r\n        transportClient.addTransportAddress(new TransportAddress(InetAddress.getByName(\"192.168.149.129\"),9300));\r\n    }\r\n    @After\r\n    public void after(){\r\n        transportClient.close();\r\n    }\r\n\r\n\r\n    /**\r\n     * 高亮查询\r\n     */\r\n    @Test\r\n    public  void testQuery(){\r\n\r\n        List<User> users = new ArrayList<>();\r\n\r\n        //创建highlightBuilder\r\n        HighlightBuilder highlightBuilder = new HighlightBuilder().field(\"*\").requireFieldMatch(false)\r\n                .preTags(\"<span style=\'color:red;\'>\")\r\n                .postTags(\"</span>\");\r\n\r\n        SearchResponse searchResponse = transportClient.prepareSearch(\"ems\")\r\n                .setTypes(\"emp\")\r\n                .setQuery(QueryBuilders.multiMatchQuery(\"框架\",\"name\",\"content\"))\r\n                .highlighter(highlightBuilder)//高亮处理\r\n                .get();\r\n\r\n\r\n        SearchHit[] hits = searchResponse.getHits().getHits();\r\n\r\n        for (SearchHit hit : hits) {\r\n\r\n            User user = new User();\r\n            //原始数据封装\r\n            Map<String,Object> sourceAsMap = hit.getSourceAsMap();\r\n            user.setId(hit.getId());\r\n            user.setName(sourceAsMap.get(\"name\").toString());\r\n            user.setName(sourceAsMap.get(\"name\").toString());\r\n            user.setAge(Integer.valueOf(sourceAsMap.get(\"age\").toString()));\r\n            try {\r\n                user.setBir(new SimpleDateFormat(\"yyyy-MM-dd\").parse(sourceAsMap.get(\"bir\").toString()));\r\n            } catch (ParseException e) {\r\n                e.printStackTrace();\r\n            }\r\n            user.setContent(sourceAsMap.get(\"content\").toString());\r\n            user.setAddress(sourceAsMap.get(\"address\").toString());\r\n            //高亮处理\r\n            Map<String, HighlightField> highlightFields = hit.getHighlightFields();\r\n            if(highlightFields.containsKey(\"name\")){\r\n                user.setName(highlightFields.get(\"name\").fragments()[0].toString());\r\n            }\r\n            if(highlightFields.containsKey(\"content\")){\r\n                user.setContent(highlightFields.get(\"content\").fragments()[0].toString());\r\n            }\r\n            users.add(user);\r\n        }\r\n\r\n        users.forEach(user -> System.out.println(\"user = \" + user));\r\n    }\r\n}\r\n\r\n```\r\n\r\n> 过滤查询\r\n\r\n```java\r\n  /**\r\n     * 过滤查询\r\n     */\r\n    @Test\r\n    public  void testQuery() {\r\n        SearchResponse searchResponse = transportClient.prepareSearch(\"ems\")\r\n                .setTypes(\"emp\")\r\n                .setPostFilter(QueryBuilders.rangeQuery(\"age\").gte(0).lte(25))\r\n                .setQuery(QueryBuilders.matchAllQuery())\r\n                .get();\r\n\r\n        SearchHit[] hits = searchResponse.getHits().getHits();\r\n        for (SearchHit hit : hits) {\r\n            System.out.println(\"hit = \" + hit);\r\n        }\r\n    }\r\n```', '2020-09-22 14:00:00', 'http://www.ruanyifeng.com/blogimg/asset/2017/bg2017081701.jpg', '原创', b'1', b'1', b'1', 'java客户端操作Elasticsearch', '2020-09-22 14:17:57', 10, 5, 1);
INSERT INTO `t_blog` VALUES (10, b'1', b'1', '## Query\r\n\r\n- **使用方法**\r\n\r\n  **URL查询：GET/索引/类型/_search?参数**\r\n\r\n  **DSL查询：GET/索引/类型/_search{}**\r\n\r\n### QueryString\r\n\r\n  ```json\r\n#1.QueryString方式查询,查询所有q=* 排序sort 分页form size\r\nGET /ems/emp/_search?q=*&sort=age:desc&size=3&from=1\r\n  ```\r\n### QueryDSL\r\n\r\n```josn\r\n#2.QueryDSL DSL特定领域的查询语言\r\n#(1)查询所有\r\nGET /ems/emp/_search\r\n{\r\n  \"query\": {\r\n    \"match_all\": {}\r\n  }\r\n}\r\n\r\n#(2)查询所有 并排序\r\nGET /ems/emp/_search\r\n{\r\n  \"query\": {\r\n    \"match_all\": {}\r\n  },\r\n  \"sort\": [\r\n    {\r\n      \"age\": {\r\n        \"order\": \"desc\"\r\n      },\r\n      \"bir\": {\r\n        \"order\": \"desc\"\r\n      }\r\n    }\r\n  ]\r\n}\r\n\r\n#(3)分页查询\r\nGET /ems/emp/_search\r\n{\r\n  \"query\": {\r\n    \"match_all\": {}\r\n  },\r\n  \"size\":\"3\",\r\n  \"from\":\"0\",\r\n  \"sort\": [\r\n    {\r\n      \"age\": {\r\n        \"order\": \"desc\"\r\n      }\r\n    }\r\n  ]\r\n}\r\n\r\n#(4)指定字段 _source\r\nGET /ems/emp/_search\r\n{\r\n  \"query\": {\r\n    \"match_all\": {}\r\n  },\r\n  \"_source\": [\"name\",\"age\",\"bir\"]\r\n}\r\n\r\n#(5)term _基于关键词查询\r\nGET ems/emp/_search\r\n{\r\n  \"query\": {\r\n    \"term\": {\r\n      \"content\": {\r\n        \"value\": \"spring\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n  >**1. type: 只有text 类型分词,keyword,integer,date等不分词**\r\n  >**2. ES中默认使用的分词器是标准分词器strandard 中文拆成单字，英文拆成单词。**\r\n\r\n```json\r\n#(6)range范围查询\r\nGET ems/emp/_search\r\n{\r\n  \"query\": {\r\n    \"range\": {\r\n      \"age\": {\r\n        \"gte\": 5,\r\n        \"lte\": 20\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n#(7)前缀查询，基于关键词前缀prefix\r\nGET ems/emp/_search\r\n{\r\n  \"query\": {\r\n    \"prefix\": {\r\n      \"address\": {\r\n        \"value\": \"北\"\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n#(8)通配符查询，wildcard ,?匹配一个，*匹配多个\r\nGET ems/emp/_search\r\n{\r\n  \"query\": {\r\n   \"wildcard\": {\r\n     \"address\": {\r\n       \"value\": \"北?\"\r\n     }\r\n   }\r\n  }\r\n}\r\n\r\n#(9)多个id查询 ids\r\nGET ems/emp/_search\r\n{\r\n  \"query\": {\r\n   \"ids\": {\r\n     \"values\": [\"spwyWXQByawye3YgOghx\",\"uJwyWXQByawye3Yg3Qiz\"]\r\n   }\r\n  }\r\n}\r\n\r\n#(10)模糊查询 fuzzy\r\n#搜索关键词长度为2，不允许存在模糊0\r\n#搜索关键词长度为3-5，允许存在一次模糊0-1\r\n#搜索关键词长度大于5，允许最大2模糊\r\nGET ems/emp/_search\r\n{\r\n  \"query\": {\r\n   \"fuzzy\": {\r\n     \"content\": \"elasticseoach\"\r\n   }\r\n  }\r\n}\r\n\r\n#(11)布尔查询bool must(&&),shoud(||),must_not(!)\r\nGET ems/emp/_search\r\n{\r\n  \"query\": {\r\n  \"bool\": {\r\n    \"must\": [\r\n      {\r\n        \"term\": {\r\n          \"age\": {\r\n            \"value\": \"23\"\r\n          }\r\n        }\r\n      },\r\n      {\"term\": {\r\n        \"address\": {\r\n          \"value\": \"北京\"\r\n        }\r\n      }}\r\n    ]\r\n  }\r\n  }\r\n}\r\n\r\n\r\n#(12)高亮查询 highlight 对查询结果做二次渲染\r\nGET ems/emp/_search\r\n{\r\n  \"query\": {\r\n   \"term\": {\r\n     \"content\": \"redis\"\r\n   }\r\n  },\r\n  \"highlight\": {\r\n    \"pre_tags\": [\"<span style=\'color:red\'>\"], \r\n    \"post_tags\": [\"</span>\"],\r\n    \"fields\": {\r\n      \"content\": {}\r\n    }\r\n  }\r\n}\r\n\r\n#(13)多个字段查询 multi_match\r\n#如果搜索字段分词，先对query分词再搜索，否则直接搜索\r\nGET ems/emp/_search\r\n{\r\n  \"query\": {\r\n   \"multi_match\": {\r\n     \"query\": \"redis\",\r\n     \"fields\": [\"address\",\"content\"]\r\n   }\r\n  }\r\n}\r\n\r\n#(14)多个字段分词查询 query_string\r\nGET ems/emp/_search\r\n{\r\n  \"query\": {\r\n   \"query_string\": {\r\n     \"default_field\": \"content\",\r\n     \"query\": \"redis是一个开源框架\"\r\n   }\r\n  }\r\n}\r\nGET ems/emp/_search\r\n{\r\n  \"query\": {\r\n   \"query_string\": {\r\n     \"query\": \"小北\",\r\n     \"fields\": [\"name\",\"content\"]\r\n   }\r\n  }\r\n}\r\n```', '2020-09-22 14:00:58', 'http://www.ruanyifeng.com/blogimg/asset/2017/bg2017081701.jpg', '原创', b'1', b'1', b'1', 'Elasticsearch基本Query方法', '2020-09-22 14:17:46', 3, 5, 1);
INSERT INTO `t_blog` VALUES (16, b'1', b'1', '## Query\r\n\r\n- **使用方法**\r\n\r\n  **URL查询：GET/索引/类型/_search?参数**\r\n\r\n  **DSL查询：GET/索引/类型/_search{}**\r\n\r\n### QueryString\r\n\r\n  ```json\r\n#1.QueryString方式查询,查询所有q=* 排序sort 分页form size\r\nGET /ems/emp/_search?q=*&sort=age:desc&size=3&from=1\r\n  ```\r\n### QueryDSL\r\n\r\n```josn\r\n#2.QueryDSL DSL特定领域的查询语言\r\n#(1)查询所有\r\nGET /ems/emp/_search\r\n{\r\n  \"query\": {\r\n    \"match_all\": {}\r\n  }\r\n}\r\n\r\n#(2)查询所有 并排序\r\nGET /ems/emp/_search\r\n{\r\n  \"query\": {\r\n    \"match_all\": {}\r\n  },\r\n  \"sort\": [\r\n    {\r\n      \"age\": {\r\n        \"order\": \"desc\"\r\n      },\r\n      \"bir\": {\r\n        \"order\": \"desc\"\r\n      }\r\n    }\r\n  ]\r\n}\r\n\r\n#(3)分页查询\r\nGET /ems/emp/_search\r\n{\r\n  \"query\": {\r\n    \"match_all\": {}\r\n  },\r\n  \"size\":\"3\",\r\n  \"from\":\"0\",\r\n  \"sort\": [\r\n    {\r\n      \"age\": {\r\n        \"order\": \"desc\"\r\n      }\r\n    }\r\n  ]\r\n}\r\n\r\n#(4)指定字段 _source\r\nGET /ems/emp/_search\r\n{\r\n  \"query\": {\r\n    \"match_all\": {}\r\n  },\r\n  \"_source\": [\"name\",\"age\",\"bir\"]\r\n}\r\n\r\n#(5)term _基于关键词查询\r\nGET ems/emp/_search\r\n{\r\n  \"query\": {\r\n    \"term\": {\r\n      \"content\": {\r\n        \"value\": \"spring\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n  >**1. type: 只有text 类型分词,keyword,integer,date等不分词**\r\n  >**2. ES中默认使用的分词器是标准分词器strandard 中文拆成单字，英文拆成单词。**\r\n\r\n```json\r\n#(6)range范围查询\r\nGET ems/emp/_search\r\n{\r\n  \"query\": {\r\n    \"range\": {\r\n      \"age\": {\r\n        \"gte\": 5,\r\n        \"lte\": 20\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n#(7)前缀查询，基于关键词前缀prefix\r\nGET ems/emp/_search\r\n{\r\n  \"query\": {\r\n    \"prefix\": {\r\n      \"address\": {\r\n        \"value\": \"北\"\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n#(8)通配符查询，wildcard ,?匹配一个，*匹配多个\r\nGET ems/emp/_search\r\n{\r\n  \"query\": {\r\n   \"wildcard\": {\r\n     \"address\": {\r\n       \"value\": \"北?\"\r\n     }\r\n   }\r\n  }\r\n}\r\n\r\n#(9)多个id查询 ids\r\nGET ems/emp/_search\r\n{\r\n  \"query\": {\r\n   \"ids\": {\r\n     \"values\": [\"spwyWXQByawye3YgOghx\",\"uJwyWXQByawye3Yg3Qiz\"]\r\n   }\r\n  }\r\n}\r\n\r\n#(10)模糊查询 fuzzy\r\n#搜索关键词长度为2，不允许存在模糊0\r\n#搜索关键词长度为3-5，允许存在一次模糊0-1\r\n#搜索关键词长度大于5，允许最大2模糊\r\nGET ems/emp/_search\r\n{\r\n  \"query\": {\r\n   \"fuzzy\": {\r\n     \"content\": \"elasticseoach\"\r\n   }\r\n  }\r\n}\r\n\r\n#(11)布尔查询bool must(&&),shoud(||),must_not(!)\r\nGET ems/emp/_search\r\n{\r\n  \"query\": {\r\n  \"bool\": {\r\n    \"must\": [\r\n      {\r\n        \"term\": {\r\n          \"age\": {\r\n            \"value\": \"23\"\r\n          }\r\n        }\r\n      },\r\n      {\"term\": {\r\n        \"address\": {\r\n          \"value\": \"北京\"\r\n        }\r\n      }}\r\n    ]\r\n  }\r\n  }\r\n}\r\n\r\n\r\n#(12)高亮查询 highlight 对查询结果做二次渲染\r\nGET ems/emp/_search\r\n{\r\n  \"query\": {\r\n   \"term\": {\r\n     \"content\": \"redis\"\r\n   }\r\n  },\r\n  \"highlight\": {\r\n    \"pre_tags\": [\"<span style=\'color:red\'>\"], \r\n    \"post_tags\": [\"</span>\"],\r\n    \"fields\": {\r\n      \"content\": {}\r\n    }\r\n  }\r\n}\r\n\r\n#(13)多个字段查询 multi_match\r\n#如果搜索字段分词，先对query分词再搜索，否则直接搜索\r\nGET ems/emp/_search\r\n{\r\n  \"query\": {\r\n   \"multi_match\": {\r\n     \"query\": \"redis\",\r\n     \"fields\": [\"address\",\"content\"]\r\n   }\r\n  }\r\n}\r\n\r\n#(14)多个字段分词查询 query_string\r\nGET ems/emp/_search\r\n{\r\n  \"query\": {\r\n   \"query_string\": {\r\n     \"default_field\": \"content\",\r\n     \"query\": \"redis是一个开源框架\"\r\n   }\r\n  }\r\n}\r\nGET ems/emp/_search\r\n{\r\n  \"query\": {\r\n   \"query_string\": {\r\n     \"query\": \"小北\",\r\n     \"fields\": [\"name\",\"content\"]\r\n   }\r\n  }\r\n}\r\n```', '2020-09-22 14:03:19', 'https://www.runoob.com/wp-content/uploads/2014/11/redis.gif', '原创', b'1', b'1', b'1', 'redis的Linux安装、持久化、事务笔记', '2020-09-22 14:18:19', 17, 11, 1);
INSERT INTO `t_blog` VALUES (21, b'1', b'1', '## 【笔记】mybatis-plus基础使用\r\n\r\n## 基于springboot\r\n## 导包\r\n\r\n```xml\r\n	<dependency>\r\n	       <groupId>com.baomidou</groupId>\r\n	       <artifactId>mybatis-plus-boot-starter</artifactId>\r\n	       <version>3.3.2</version>\r\n	</dependency>\r\n```\r\n## User实体类\r\n\r\n```java\r\n@Data\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\n@Accessors(chain = true)\r\n@TableName(\"t_user\")//默认将类名作为表名\r\npublic class User {\r\n    //标记主键\r\n    @TableId(type = IdType.AUTO)//value  = \"id\",不标记数据库自增则会自动生成非常大数字\r\n    private String id;\r\n\r\n    //解决字段映射\r\n    @TableField(\"name\")\r\n    private String name;\r\n    private Integer age;\r\n    private Date bir;\r\n\r\n//    @TableField(exist = false)//不映射数据库表中的字段\r\n\r\n}\r\n```\r\n\r\n## userDao\r\n\r\n```java\r\n//使用mybatis-plus增强接口\r\n@Mapper\r\npublic interface UserDAO extends BaseMapper<User> {\r\n\r\n}\r\n```\r\n\r\n## 测试类TestUserDao\r\n\r\n```java\r\n@SpringBootTest\r\npublic class TestUserDAO {\r\n\r\n    @Resource\r\n    private UserDAO userDAO;\r\n\r\n    //查询所有\r\n    @Test\r\n    public void testFindAll(){\r\n        List<User> users = userDAO.selectList(null);\r\n        for (User user : users) {\r\n            System.out.println(user);\r\n        }\r\n    }\r\n    //findById\r\n    @Test\r\n    public void testFindById(){\r\n        User user = userDAO.selectById(\"2\");\r\n        System.out.println(\"user = \" + user);\r\n    }\r\n\r\n    //条件查询\r\n    @Test\r\n    public void testFind(){\r\n//   	表示条件\r\n        QueryWrapper<User> queryWrapper = new QueryWrapper<>();\r\n\r\n//        queryWrapper.eq(\"age\",23);//等值查询\r\n//        queryWrapper.lt(\"age\",23);//设置小于查询\r\n//        queryWrapper.le(\"age\",23);//设置等于查询\r\n//         gt ,ge 大于\r\n        queryWrapper.like(\"name\",\"小\");\r\n\r\n        List<User> userList = userDAO.selectList(queryWrapper);\r\n        userList.forEach(user -> System.out.println(\"user = \" + user));\r\n\r\n//        userList.forEach(new Consumer<User>() {\r\n//            @Override\r\n//            public void accept(User user) {\r\n//                System.out.println(\"user = \" + user);\r\n//            }\r\n//        });\r\n    }\r\n	\r\n	//插入\r\n    @Test\r\n    public void TestSave(){\r\n        User entity = new User();\r\n        entity.setName(\"小明\").setAge(45).setBir(new Date());\r\n        userDAO.insert(entity);\r\n    }\r\n\r\n    //基于id修改\r\n    @Test\r\n    public void TestUpdateById(){\r\n        User user = userDAO.selectById(\"2\");\r\n        user.setName(\"chenyn\");\r\n        userDAO.updateById(user);\r\n    }\r\n\r\n    //基于条件的修改\r\n    @Test\r\n    public void testUpdate(){\r\n        User user = userDAO.selectById(\"2\");\r\n        user.setName(\"小红\");\r\n//        set(null)为不修改\r\n        QueryWrapper<User> wrapper = new QueryWrapper<>();\r\n        wrapper.eq(\"age\",23);\r\n        userDAO.update(user, wrapper);\r\n    }\r\n	\r\n	//根据id删除\r\n    @Test\r\n    public void TestDeleteById(){\r\n        userDAO.deleteById(\"3\");\r\n    }\r\n\r\n    //分页查询\r\n    @Test\r\n    public void testFindPage(){\r\n        //参数1:当前页（默认 1） 参数2:每页显示记录数（默认 10）\r\n        IPage<User> page = new Page<>(1,2);\r\n        \r\n        //参数1:page 参数2:条件\r\n        IPage<User> userIPage = userDAO.selectPage(page,null);\r\n        //获取总记录条数\r\n        long total = userIPage.getTotal();\r\n        System.out.println(\"total = \" + total);\r\n\r\n        userIPage.getRecords().forEach(user -> {\r\n            System.out.println(\"user = \" + user);\r\n        });\r\n    }\r\n\r\n}\r\n```\r\n**分页查询必须配置分页插件**\r\n\r\n```java\r\n//Spring boot方式\r\n@EnableTransactionManagement\r\n@Configuration\r\n@MapperScan(\"com.baomidou.cloud.service.*.mapper*\")\r\npublic class MybatisPlusConfig {\r\n\r\n    @Bean\r\n    public PaginationInterceptor paginationInterceptor() {\r\n        PaginationInterceptor paginationInterceptor = new PaginationInterceptor();\r\n        // 设置请求的页面大于最大页后操作， true调回到首页，false 继续请求  默认false\r\n        // paginationInterceptor.setOverflow(false);\r\n        // 设置最大单页限制数量，默认 500 条，-1 不受限制\r\n        // paginationInterceptor.setLimit(500);\r\n        // 开启 count 的 join 优化,只针对部分 left join\r\n        paginationInterceptor.setCountSqlParser(new JsqlParserCountOptimize(true));\r\n        return paginationInterceptor;\r\n    }\r\n}\r\n```\r\n最简单配下面就行\r\n```java\r\n@Configuration\r\npublic class MybatisPlusConfig {\r\n    @Bean\r\n    public PaginationInterceptor paginationInterceptor(){\r\n        return  new PaginationInterceptor();\r\n    }\r\n}\r\n```', '2020-09-22 14:05:32', 'https://baomidou.com/img/logo.svg', '原创', b'1', b'1', b'1', '【笔记】mybatis-plus基础使用', '2020-09-22 14:18:11', 5, 17, 1);
INSERT INTO `t_blog` VALUES (22, b'1', b'1', '## Redis五种基本数据类型基础操作\r\n\r\n### string类型基本操作\r\n\r\n+ 添加/修改\r\n\r\n```ba\r\nset key value\r\n```\r\n\r\n+ 获取数据\r\n\r\n```bash\r\nget key\r\n```\r\n\r\n+ 删除数据\r\n\r\n```bash\r\ndel key\r\n```\r\n\r\n+ 增改多个数据\r\n\r\n```bash\r\nmset key1 value1 key2 value2 \r\nmget key1 key2\r\n```\r\n\r\n+ 获取字符个数（字符串长度）\r\n\r\n```bash\r\nstrlen key\r\n```\r\n\r\n+ 追加到后面（没有则新建）\r\n\r\n```bash\r\nappend key value\r\n```\r\n\r\n### string类型扩展操作\r\n\r\n+ 数值增减操作\r\n\r\n```bash\r\n127.0.0.1:6379> set num 1\r\nOK\r\n127.0.0.1:6379> incr num\r\n(integer) 2\r\n127.0.0.1:6379> incr num\r\n(integer) 3\r\n127.0.0.1:6379> get num\r\n\"3\"\r\n127.0.0.1:6379> decr num\r\n(integer) 2\r\n127.0.0.1:6379> incrby num 10\r\n(integer) 12\r\n127.0.0.1:6379> incrbyfloat num 1.5\r\n\"13.5\"\r\n```\r\n\r\n`string类型在redis默认字符串，incr和decr操作会转换成数值型进行计算`\r\n\r\n+ 设置数据指定生命周期\r\n\r\n```bash\r\nsetex key seconds value    //秒\r\npsetex key milliseconds value   //毫秒\r\n```\r\n\r\n```bash\r\n127.0.0.1:6379> setex tel 10 1\r\nOK\r\n127.0.0.1:6379> get tel\r\n\"1\"\r\n127.0.0.1:6379> get tel\r\n(nil)\r\n```\r\n\r\n### hash类型基本操作\r\n\r\n+ 添加/修改/获取/删除\r\n\r\n```bash\r\n127.0.0.1:6379> hset user name zhangsan\r\n(integer) 1\r\n127.0.0.1:6379> hset user age 38\r\n(integer) 1\r\n127.0.0.1:6379> hset user weight 80\r\n(integer) 1\r\n127.0.0.1:6379> hgetall user\r\n1) \"name\"\r\n2) \"zhangsan\"\r\n3) \"age\"\r\n4) \"38\"\r\n5) \"weight\"\r\n6) \"80\"\r\n127.0.0.1:6379> hget user name\r\n\"zhangsan\"\r\n127.0.0.1:6379> hdel user weight\r\n(integer) 1\r\n127.0.0.1:6379> hgetall user\r\n1) \"name\"\r\n2) \"zhangsan\"\r\n3) \"age\"\r\n4) \"38\"  \r\n```\r\n+ 增改多个数据\r\n```bash\r\n127.0.0.1:6379> hmget user name age\r\n1) \"zhangsan\"\r\n2) \"38\"\r\n127.0.0.1:6379> hmset user name zhangsanfeng weight 68  //hmset key field value [field value ...]\r\nOK\r\n127.0.0.1:6379> hgetall user\r\n1) \"name\"\r\n2) \"zhangsanfeng\"\r\n3) \"age\"\r\n4) \"38\"\r\n5) \"weight\"\r\n6) \"68\"\r\n127.0.0.1:6379> hlen user //查看field数量\r\n(integer) 3\r\n127.0.0.1:6379> hexists user age //查看field是否存在\r\n(integer) 1\r\n```\r\n\r\n### hash类型扩展操作\r\n\r\n+ 获取field的key和value\r\n\r\n```bash\r\n127.0.0.1:6379> hkeys user\r\n1) \"name\"\r\n2) \"age\"\r\n3) \"weight\"\r\n127.0.0.1:6379> hvals user\r\n1) \"zhangsanfeng\"\r\n2) \"38\"\r\n3) \"68\"\r\n```\r\n\r\n+ 数值增减\r\n\r\n```bash\r\n127.0.0.1:6379> hincrby user age 1               //传负数就是减少\r\n(integer) 39\r\n127.0.0.1:6379> hincrbyfloat user age 1.5\r\n\"40.5\"\r\n```\r\n\r\n```bas\r\nhsetnx key field value //存在就不改变，不存在则添加\r\n```\r\n\r\n### list类型基础操作\r\n\r\n`底层双向链表实现`\r\n\r\n+ 增改/获取/删除\r\n\r\n```bash\r\n\r\n127.0.0.1:6379> lpush list1 huawei\r\n(integer) 1\r\n127.0.0.1:6379> lpush list1 apple\r\n(integer) 2\r\n127.0.0.1:6379> lpush list1 microsoft\r\n(integer) 3\r\n127.0.0.1:6379> lrange list1 0 2    //从0查到2\r\n1) \"microsoft\"\r\n2) \"apple\"\r\n3) \"huawei\"\r\n\r\n127.0.0.1:6379> rpush list2 a b c\r\n(integer) 3\r\n127.0.0.1:6379> lrange list2 0 2\r\n1) \"a\"\r\n2) \"b\"\r\n3) \"c\"\r\n127.0.0.1:6379> lrange list2 0 -1   //从0查到-1(倒数第一个)\r\n1) \"a\"\r\n2) \"b\"\r\n3) \"c\"\r\n\r\n//查单个\r\n127.0.0.1:6379> lindex list1 0\r\n\"microsoft\"\r\n127.0.0.1:6379> lindex list1 2\r\n\"huawei\"\r\n\r\n//查长度\r\n127.0.0.1:6379> llen list1\r\n(integer) 3\r\n\r\n//删除\r\n127.0.0.1:6379> lpush list3 a b c\r\n(integer) 3\r\n127.0.0.1:6379> lpop list3\r\n\"c\"\r\n127.0.0.1:6379> lpop list3\r\n\"b\"\r\n```\r\n\r\n### list类型扩展操作\r\n\r\n+ 规定时间内获取并移除数据（等待数据输入）\r\n\r\n```bash\r\nblpop key1 [key2] timeout\r\nbrpop key1 [key2] timeout\r\n```\r\n\r\n+ 移除指定数据\r\n\r\n```bash\r\nlrem key count value\r\n```\r\n\r\n### set类型基本操作\r\n\r\n```shell\r\n增删改查\r\n127.0.0.1:6379> sadd users zs\r\n(integer) 1\r\n127.0.0.1:6379> sadd users ls\r\n(integer) 1\r\n127.0.0.1:6379> sadd users ww\r\n(integer) 1\r\n127.0.0.1:6379> smembers users\r\n1) \"zs\"\r\n2) \"ww\"\r\n3) \"ls\"\r\n127.0.0.1:6379> srem users ww\r\n(integer) 1\r\n127.0.0.1:6379> smembers users\r\n1) \"zs\"\r\n2) \"ls\"\r\n\r\n //获取集合总数\r\n 127.0.0.1:6379> scard users\r\n(integer) 2\r\n //是否包含指定数据\r\n127.0.0.1:6379> sismember users zs\r\n(integer) 1\r\n```\r\n\r\n### set类型扩展操作\r\n\r\n+ 随机获取集合中指定数量的数据\r\n\r\n```shell\r\nsrandmember key [count]\r\n```\r\n\r\n+ 随机获取某个数据并移除集合\r\n\r\n```shell\r\nspop key\r\n```\r\n\r\n+ 求两个合集的交、并、差集\r\n\r\n```shell\r\nsinter key1 [key2]\r\nsunion key1 [key2]\r\nsdiff key1 [key2]\r\n```\r\n\r\n+ 求两个合集的交、并、差集并存储到指定集合中\r\n\r\n```shell\r\nsinterstore destination key1 [key2]\r\nsunionstore destination key1 [key2]\r\nsdiffstore destination key1 [key2]\r\n```\r\n+ 将指定数据从原始集合移动到目标集合中\r\n\r\n```shell\r\nsmove source destination member\r\n```\r\n\r\n### sorted_set类型基本操作\r\n\r\n+ 添加数据\r\n\r\n```shell\r\nzadd key scorel member1 [score2 member2]\r\n```\r\n\r\n- 获取全部数据\r\n\r\n```shell\r\nzrange key start stop [WITHSCORES]\r\nzrevrange key start stop [WITHSCORES]\r\n```\r\n\r\n- 删除数据\r\n\r\n```shell\r\nzrem key member [member...]\r\n```\r\n\r\n- 按条件获取数据\r\n\r\n```shell\r\nzrangebyscore key min max [WITHSCORES] [LIMIT offset count] \r\nzrevrangebyscore key min max [WITHSCORES] [LIMIT offset count] \r\n```\r\n\r\n- 条件删除数据\r\n\r\n```shell\r\nzremrangebyrank key start stop    \r\nzremrangebyscore key min max      \r\n```\r\n\r\n- 获取集合数据总量\r\n\r\n```shell\r\nzcard key\r\nzcount key min max\r\n```\r\n\r\n- 集合交、并操作\r\n\r\n```shell\r\nzinterstore destination numkeys key [key ...] \r\nzunionstore destination numkeys key [key ...]\r\n```\r\n\r\n### sorted_set类型扩展操作\r\n\r\n- 获取数据对应索引（排名）\r\n\r\n```shell\r\nzrank key member\r\nzrevrank key member\r\n```\r\n\r\n- score值获取与修改\r\n\r\n```shell\r\nzscore key member  \r\nzincrby key increment member \r\n```', '2020-09-22 14:07:47', 'https://www.runoob.com/wp-content/uploads/2014/11/redis.gif', '原创', b'1', b'1', b'1', 'Redis五种基本数据类型基础操作', '2020-09-22 14:17:35', 1, 11, 1);
INSERT INTO `t_blog` VALUES (23, b'0', b'0', '# 这个是测试', '2019-12-01 14:19:22', 'https://picsum.photos/seed/picsum/800/450', '原创', b'1', b'0', b'0', '测试', '2019-12-01 14:19:22', 1, 7, 1);
INSERT INTO `t_blog` VALUES (25, b'1', b'1', '## mysql\r\n\r\n### 约束\r\n\r\n```mysql\r\n-- 复合主键\r\n\r\nCREATE TABLE user(\r\n	id INT,\r\n	name VARCHAR(20),\r\n	password VARCHAR(20),\r\n	PRIMARY KEY (id,name)\r\n);\r\n\r\nINSERT INTO user VALUES(\'1\',\'张三\',\'123\');\r\n\r\n\r\n-- 自增约束\r\n\r\nCREATE TABLE user2(\r\n	id INT PRIMARY KEY auto_increment,\r\n	name VARCHAR(20)\r\n);\r\n\r\nINSERT INTO user2(name) VALUES (\'张三\');\r\n\r\n\r\n-- 唯一约束(添加的键不能重复) unique\r\nCREATE TABLE user2(\r\n	id INT PRIMARY KEY auto_increment,\r\n	name VARCHAR(20),\r\n	unique(name)\r\n);\r\n\r\n\r\n-- 外键约束 \r\n-- 父表，子表\r\n\r\nCREATE TABLE classes(\r\n	id INT PRIMARY KEY,\r\n	name VARCHAR(20)\r\n);\r\n\r\nCREATE TABLE students(\r\n	id INT PRIMARY KEY,\r\n	name VARCHAR(20),\r\n	class_id int,\r\n	foreign KEY(class_id) references classes(id)\r\n);\r\n\r\nINSERT INTO classes VALUES(1,\'一班\');\r\nINSERT INTO classes VALUES(2,\'二班\');\r\nINSERT INTO classes VALUES(3,\'三班\');\r\nINSERT INTO classes VALUES(4,\'四班\');\r\n\r\nINSERT INTO students VALUES(1001,\'张三\',1);\r\nINSERT INTO students VALUES(1002,\'张三\',2);\r\nINSERT INTO students VALUES(1003,\'张三\',3);\r\nINSERT INTO students VALUES(1004,\'张三\',4);\r\n\r\n-- 主表 classes 中没有的数据值，在副表里面不能使用\r\n-- 主表中被引用的数据不能被删除\r\n\r\n-- 三大设计范式\r\n-- 1NF\r\n-- 2NF\r\n-- 3NF\r\n```\r\n\r\n### 查询数据准备\r\n\r\n```sql\r\n-- 查询练习数据准备\r\n\r\n-- 学生表\r\n-- Student\r\n-- 学号\r\n-- 姓名\r\n-- 性别\r\n-- 出生年月日\r\n-- 所在班级\r\nCREATE TABLE Student(\r\n	sno VARCHAR(20) PRIMARY KEY,\r\n	sname VARCHAR(20) not null,\r\n	ssex VARCHAR(10) not null,\r\n	sbirthday datetime,\r\n	class VARCHAR(20)\r\n);\r\n\r\n-- 教师表\r\n-- Teacher\r\n-- 教师编号\r\n-- 教师名称\r\n-- 教师性别\r\n-- 出生年月日\r\n-- 职称\r\nCREATE TABLE Teacher(\r\n	tno VARCHAR(20) PRIMARY KEY,\r\n	tname VARCHAR(20) not null,\r\n	tsex VARCHAR(10) not null,\r\n	tbirthday datetime,\r\n	prof VARCHAR(20) not null,\r\n	depart VARCHAR(20) not null\r\n);\r\n\r\n-- 课程表\r\n-- Course\r\n-- 课程号\r\n-- 课程名称\r\n-- 教师编号\r\nCREATE TABLE Course(\r\n	cno VARCHAR(20) PRIMARY KEY,\r\n	cname VARCHAR(20) not null,\r\n	tno VARCHAR(20) not null,\r\n	foreign key(tno) references Teacher(tno)\r\n);\r\n\r\n-- 成绩表\r\n-- Score\r\n-- 学号\r\n-- 课程号\r\n-- 成绩\r\nCREATE TABLE Score(\r\n	sno VARCHAR(20) not null,\r\n	cno VARCHAR(20) not null,\r\n	degree decimal,\r\n	foreign key(sno) references Student(sno),\r\n	foreign key(cno) references Course(cno),\r\n	PRIMARY key(sno,cno)\r\n);\r\n\r\n\r\n-- 添加数据\r\n-- 学生表数据\r\nINSERT INTO student VALUES(\'101\',\'曾华\',\'男\',\'1977-09-01\',\'95033\');\r\nINSERT INTO student VALUES(\'102\',\'匡明\',\'男\',\'1975-10-02\',\'95031\');\r\nINSERT INTO student VALUES(\'103\',\'王丽\',\'女\',\'1976-01-23\',\'95033\');\r\nINSERT INTO student VALUES(\'104\',\'李军\',\'男\',\'1976-02-20\',\'95033\');\r\nINSERT INTO student VALUES(\'105\',\'王芳\',\'女\',\'1975-02-10\',\'95031\');\r\nINSERT INTO student VALUES(\'106\',\'陆军\',\'男\',\'1974-06-03\',\'95031\');\r\nINSERT INTO student VALUES(\'107\',\'王尼玛\',\'男\',\'1976-02-20\',\'95033\');\r\nINSERT INTO student VALUES(\'108\',\'张全蛋\',\'男\',\'1975-02-10\',\'95031\');\r\nINSERT INTO student VALUES(\'109\',\'赵铁柱\',\'男\',\'1974-06-03\',\'95031\');\r\n\r\n-- 教师表数据\r\nINSERT INTO teacher VALUES(\'804\',\'李诚\',\'男\',\'1958-12-02\',\'副教授\',\'计算机系\');\r\nINSERT INTO teacher VALUES(\'856\',\'张旭\',\'男\',\'1969-03-12\',\'讲师\',\'电子工程系\');\r\nINSERT INTO teacher VALUES(\'825\',\'王萍\',\'女\',\'1972-05-05\',\'助教\',\'计算机系\');\r\nINSERT INTO teacher VALUES(\'831\',\'刘冰\',\'女\',\'1977-08-14\',\'助教\',\'电子工程系\');\r\n \r\n-- 添加课程表\r\nINSERT INTO course VALUES(\'3-105\',\'计算机导论\',\'825\');\r\nINSERT INTO course VALUES(\'3-245\',\'操作系统\',\'804\');\r\nINSERT INTO course VALUES(\'6-166\',\'数字电路\',\'856\');\r\nINSERT INTO course VALUES(\'9-888\',\'高等数学\',\'831\');\r\n\r\n-- 添加成绩表\r\nINSERT INTO score VALUES(\'103\',\'3-245\',\'86\');\r\nINSERT INTO score VALUES(\'105\',\'3-245\',\'75\');\r\nINSERT INTO score VALUES(\'109\',\'3-245\',\'68\');\r\nINSERT INTO score VALUES(\'103\',\'3-105\',\'92\');\r\n\r\nINSERT INTO score VALUES(\'105\',\'3-105\',\'88\');\r\nINSERT INTO score VALUES(\'109\',\'3-105\',\'76\');\r\nINSERT INTO score VALUES(\'103\',\'6-166\',\'85\');\r\n\r\nINSERT INTO score VALUES(\'105\',\'6-166\',\'79\');\r\nINSERT INTO score VALUES(\'109\',\'6-166\',\'81\');\r\n```\r\n\r\n### 查询练习\r\n\r\n```sql\r\n-- 查询练习\r\n-- 1.查询student表中所有的记录\r\nselect * from student;\r\n\r\n-- 2.查询student表中所有记录的sname,ssex和class列\r\nselect sname,ssex,class from student;\r\n\r\n-- 3.查询教师所有的单位但是不重复的depart列\r\n-- distinct 排除重复\r\nselect distinct depart from teacher;\r\n\r\n-- 4.查询score表中成绩在60-80之间所有的记录(degree)\r\nselect * from score where degree between 60 and 80;\r\n\r\nselect * from score where degree>60 and degree<80;\r\n\r\n-- 5.查询score表中成绩为85, 86, 或者88的记录(degree)\r\nselect * from score where degree in(85,86,88);\r\n\r\n-- 6.查询student表中\'95031\'班或者性别为\'女\'的同学记录\r\nselect * from student where class=\'95031\' or ssex=\'女\';\r\n\r\n-- 7.以class降序查询student表中所有的记录\r\n--升序asc(默认)，降序desc\r\nselect * from student order by class desc;\r\n\r\n-- 8.以cno升序.degree降序插叙score表中所有的数据\r\nselect * from score order by cno asc,degree desc; \r\n\r\n-- 9.查询\'95031\'班的学生人数\r\n--统计 count\r\nselect count(*) from student where class=\'95031\';\r\n\r\n-- 10.查询score表中的最高分数的学生号和课程号.(子查询或者排序)\r\n-- (1)找到最高分\r\n-- (2)找最高分sno和cno\r\nselect sno,cno from score where degree=(select max(degree) from score);\r\n-- 排序做法\r\n-- limit (从多少开始),(查多少条)\r\nselect sno,cno from score order by degree desc limit 0,1;\r\n\r\n-- 11.查询每门课的平均成绩\r\n-- avg()\r\n-- select avg(degree) from score where cno=\'3-105\';\r\n-- group by分组\r\nselect cno,avg(degree) from score group by cno;\r\n\r\n-- 12.查询score表中至少有2名学生选修的,并且以3开头的课程的平均分\r\nselect cno,avg(degree),count(*) from score group by cno having count(cno)>=2 and cno like \'3%\';\r\n\r\n-- 13.查询分数大于70但是小于90的sno列\r\nselect sno,degree from score where degree>70 and degree<90;\r\n-- between 其实是大于等于和小于等于\r\nselect sno,degree from score where degree between 70 and 90;\r\n\r\n-- 14.查询所有的学生 sname , cno, degree列\r\n-- select sno,sname from student;\r\n-- select sno,cno,degree from score;\r\nselect sname,cno,degree from student,score where student.sno = score.sno;\r\n\r\n-- 15.查询所有学生的sno, cname, degree列\r\n-- select cno,cname from course;\r\n-- select cno,sno,degree from score;\r\nselect sno,cname,degree from course,score where course.cno = score.cno;\r\n\r\n-- 16.查询所有的学生 sname , cname, degree列\r\n-- sname -> student\r\n-- cname -> scoure\r\n-- degree -> score\r\nselect sname,cname,degree from student,course,score where student.sno=score.sno and course.cno = score.cno;\r\n\r\n-- 17.查询班级是\'95031\'班学生每门课的平均分\r\n-- select sno from student where class=\'95031\';\r\n-- select * from score where sno in(select sno from student where class=\'95031\');\r\nselect cno,avg(degree) from score where sno in(select sno from student where class=\'95031\') group by cno;\r\n\r\n-- 18.查询选修\"3-105\"课程的成绩高于\'109\'号同学\'3-105\'成绩 的所有同学的记录\r\n-- select degree from score where sno=\'109\' and cno=\'3-105\';\r\nselect * from score where cno=\'3-105\' and degree>(select degree from score where sno=\'109\' and cno=\'3-105\');\r\n\r\n-- 19.查询成绩高于学号为\'109\',课程号为\'3-105\'的成绩的所有记录\r\nselect * from score where degree>(select degree from score where sno=\'109\' and cno=\'3-105\');\r\n\r\n-- 20.查询所有学号为108、101的同学同年出生的所有学生的sno,sname和sbirthday\r\n-- select year(sbirthday) from student where sno in (108,101);\r\nselect sno,sname,sbirthday from student where year(sbirthday) in (select year(sbirthday) from student where sno in (108,101));\r\n\r\n-- 21.查询 \"张旭\" 教师任课的学生的成绩\r\n-- select tno from teacher where tname=\'张旭\';\r\n-- select cno from course where tno=(select tno from teacher where tname=\'张旭\');\r\nselect * from score where cno=(select cno from course where tno=(select tno from teacher where tname=\'张旭\'));\r\n\r\n-- 22.查询选修课程的同学人数多于 5 人的教师姓名\r\n-- 为了效果,添加数据:\r\nINSERT INTO score VALUES(\'101\',\'3-105\',\'90\');\r\nINSERT INTO score VALUES(\'102\',\'3-105\',\'91\');\r\nINSERT INTO score VALUES(\'104\',\'3-105\',\'89\');\r\n-- select cno from score group by cno having count(*)>5;\r\nselect tname from teacher where tno in(select tno from course where cno in(select cno from score group by cno having count(*)>5));\r\n\r\n-- 23.查询95033班和95031班全体学生的记录\r\n-- 添加数据\r\nINSERT INTO student VALUES(\'110\',\'张飞\',\'男\',\'1974-06-03\',\'95038\');\r\nselect * from student where class in(\'95031\',\'95033\');\r\n\r\n-- 24.查询存在85分以上成绩的课程cno\r\nselect cno from score where degree>85 group by cno;\r\n\r\n-- 25.查出所有\'计算机系\' 教师所教课程的成绩表\r\n-- select * from teacher where depart=\'计算机系\';\r\n-- select * from course where tno in(select tno from teacher where depart=\'计算机系\');\r\nselect * from score where cno in (select cno from course where tno in(select tno from teacher where depart=\'计算机系\'));\r\n\r\n-- 26.查询\'计算机系\'与\'电子工程系\' 不同职称的教师的name和prof\r\n-- union求并集\r\nselect * from teacher where depart =\'计算机系\' and prof not in(select prof from teacher where depart=\'电子工程系\')\r\nunion\r\nselect * from teacher where depart =\'电子工程系\' and prof not in(select prof from teacher where depart=\'计算机系\');\r\n\r\n-- 27, 查询选修编号为\"3-105\"课程且成绩至少高于选修编号为\'3-245\'同学的cno,sno和degree,并且按照degree从高到地次序排序\r\n-- any 任意一个,>min也可以\r\nselect * from score where cno=\'3-105\' and degree>any(select degree from score where cno=\'3-245\') order by degree desc;\r\n\r\n-- 28.查询选修编号为\"3-105\"且成绩高于选修编号为\"3-245\"课程的同学cno.sno和degree\r\n-- all 就是所有，>max也可以\r\nselect * from score where cno=\'3-105\' and degree>all(select degree from score where cno=\'3-245\');\r\n\r\n-- 29. 查询所有教师和同学的 name ,sex, birthday\r\n-- as取别名，union取并集(这里第二排默认用第一排别名)\r\nselect tname as name,tsex as sex,tbirthday as birthday from teacher\r\nunion\r\nselect sname,ssex,sbirthday from student;\r\n\r\n-- 30.查询所有\'女\'教师和\'女\'学生的name,sex,birthday\r\nselect tname as name,tsex as sex,tbirthday as birthday from teacher where tsex = \'女\'\r\nunion\r\nselect sname,ssex,sbirthday from student where ssex = \'女\';\r\n\r\n-- 31.查询成绩比该课程平均成绩低的同学的成绩表\r\nselect * from score a where degree< (select avg(degree) from score b where a.cno=b.cno);\r\n\r\n-- 32.查询所有任课教师的tname 和 depart(课程表中安排了课程)\r\nselect tname,depart from teacher where tno in(select tno from course);\r\n\r\n-- 33.查出至少有2名男生的班号\r\nselect class from student where ssex=\'男\' group by class having count(*)>1; \r\n\r\n-- 34.查询student 表中 不姓\"王\"的同学的记录\r\nselect * from student where sname not like \'王%\';\r\n\r\n-- 35. 查询student 中每个学生的姓名和年龄(当前时间 - 出生年份)\r\n-- 当前年份select year(now());\r\nselect sname,year(now())-year(sbirthday) as \'年龄\' from student;\r\n\r\n-- 36. 查询student中最大和最小的 sbirthday的值\r\n-- max与min函数\r\nselect max(sbirthday) as \'MAX\',min(sbirthday) as \'MIN\' from student;\r\n\r\n-- 37.以班级号和年龄从大到小的顺序查询student表中的全部记录\r\nselect * from student order by class desc,sbirthday asc;\r\n\r\n-- 38.查询\"男\"教师 及其所上的课\r\n-- select * from teacher where tsex = \'男\';\r\nselect * from course where tno in (select tno from teacher where tsex = \'男\');\r\n\r\n-- 39.查询最高分同学的sno cno 和 degree;\r\n-- select max(degree) from score;\r\nselect * from score where degree =(select max(degree) from score);\r\n\r\n-- 40. 查询和\"李军\"同性别的所有同学的sname\r\nselect sname from student where ssex= (select ssex from student where sname=\'李军\');\r\n\r\n-- 41.查询和\"李军\"同性别并且同班的所有同学的sname\r\nselect sname from student where ssex= (select ssex from student where sname=\'李军\') and class=(select class from student where sname=\'李军\');\r\n\r\n\r\n-- 42. 查询所有选修\'计算机导论\'课程的\'男\'同学的成绩表\r\n-- select * from student where ssex = \'男\';\r\n-- select * from course where cname =\'计算机导论\';\r\nselect * from score where cno=(select cno from course where cname =\'计算机导论\') and sno in(select sno from student where ssex = \'男\');\r\n\r\n\r\n-- 43. 假设使用了以下命令建立了一个grade表\r\nCREATE TABLE grade(\r\n    low INT(3),\r\n    upp INT(3),\r\n    grade CHAR(1)\r\n);\r\nINSERT INTO grade VALUES(90,100,\'A\');\r\nINSERT INTO grade VALUES(80,89,\'B\');\r\nINSERT INTO grade VALUES(70,79,\'c\');\r\nINSERT INTO grade VALUES(60,69,\'D\');\r\nINSERT INTO grade VALUES(0,59,\'E\');\r\n\r\n-- 查询所有同学的sno , cno 和grade列\r\nselect sno,cno,grade from score,grade where degree between low and upp;\r\n\r\n\r\n\r\n\r\n-- 连接查询\r\n-- person表 id ,name ,cardId\r\nCREATE TABLE person(\r\n	id int,\r\n	name VARCHAR(20),\r\n	cardId int	\r\n);\r\n-- card表 card,name\r\nCREATE TABLE card(\r\n	id int,\r\n	name VARCHAR(20)\r\n);\r\n\r\nINSERT INTO card VALUES (1,\'饭卡\');\r\nINSERT INTO card VALUES (2,\'建行卡\');\r\nINSERT INTO card VALUES (3,\'农行卡\');\r\nINSERT INTO card VALUES (4,\'工商卡\');\r\nINSERT INTO card VALUES (5,\'邮政卡\');\r\n\r\nINSERT INTO person VALUES (1,\'张三\',1);\r\nINSERT INTO person VALUES (2,\'李四\',3);\r\nINSERT INTO person VALUES (3,\'王五\',6);\r\n\r\n-- 内连接(两张表中数据通过某个字段相等查询出相关记录数据)\r\n-- inner join 或者 join\r\nselect * from person inner join card on person.cardId = card.id;\r\n\r\n-- 外连接 \r\n-- 1.左连接 left join 或者 left outer join\r\n-- 左边表里面的所有数据取出来，右边表数据如果有则显示，没有则显示NULL\r\nselect * from person left join card on person.cardId = card.id;\r\n\r\n-- 2.右连接 right join 或者 right outer join\r\n-- 右边表里面的所有数据取出来，右边表数据如果有则显示，没有则显示NULL\r\nselect * from person right join card on person.cardId = card.id;\r\n\r\n-- 3.完全外连接 full join 或者 full outer join(mysql不支持full join)\r\n-- mysql实现就是左右连接取并集\r\nselect * from person left join card on person.cardId = card.id\r\nunion\r\nselect * from person right join card on person.cardId = card.id;\r\n```\r\n\r\n\r\n\r\n', '2020-10-21 18:48:34', 'https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=1575745667,4069176207&fm=26&gp=0.jpg', '原创', b'1', b'1', b'1', 'Mysql查询练习', '2020-11-08 21:34:13', 15, 15, 1);
INSERT INTO `t_blog` VALUES (30, b'1', b'1', '## JSP 9大内置对象\r\n\r\n- request:   请求对象；存储“客户端向服务器端发送的请求信息”。\r\n\r\n  - 常见方法：\r\n  - String getParameter(String name) : 根据字段名key （input标签的name属性） ，返回字段value (input标签的value属性值)\r\n  - String[] getParameterValues(String name) : 根据字段名key ，返回多个字段值value (checkbox)\r\n  - void setCharacterEncoding(\" 编码格式utf-8\"):设置请求编码(tomcat7以前默认iso-8859-1，tomcat8以后默认utf-8)\r\n  - getRequestDispatcher(\"b.jsp\").forward(request,response):请求转发的方式跳转页面 a->b\r\n  - getServerContext():获取项目的ServerContext对象\r\n\r\n- response:  响应对象\r\n\r\n  - 常见方法：\r\n  - void addCookie(Cookie cookie) : 服务端向客户端增加一个Cookie对象\r\n  - void sendRedirect(String location): throws IOException 重定向\r\n  - void setContentType(String type):设置服务端响应的编码(设置服务端的content)\r\n\r\n- session(服务端)\r\n\r\n  - 这里引入Cookie做对比\r\n\r\n  - Cookie(客户端，不是内置对象)：是由服务端产生，再发送给客户端保存。相当于本地缓存的作用。提高访问服务端的效率，但是安全性较差。\r\n\r\n    - Cookie name --- value  \r\n\r\n    - public Cookie(String key ,String value)\r\n\r\n    - String getName()\r\n\r\n    - String getValue()\r\n\r\n    - void SetMaxAge(int expiry) 最大有效期（秒）\r\n\r\n    - 服务端准备Cookie \r\n\r\n      response.addCookie(Cookie cookie)\r\n\r\n      页面跳转（转发，重定向）\r\n\r\n      客户端获取Cookie：request.getCookies()\r\n\r\n  - session: 会话\r\n\r\n    - 客户端第一次请求服务端时，服务端会产生一个session对象（用于保存客户信息），并且每个session对象，都会有一个唯一的sessionID（用于区分其他session），服务端会产生一个cookie，并且cookie的name=JSESSIONID，value=服务端sessionID的值，然后服务端会在响应客户端时把cookie发给客户端，实现一一对应。\r\n\r\n    - 客户端第二次请求服务端时，会先匹配Cookie中的JSESSIONID和session中的sessionID\r\n\r\n    - String getId():获取sessionId\r\n\r\n    - boolean isNew():判断是否是第一次访问\r\n\r\n    - void invalidate():使session失效(退出登录，注销)\r\n\r\n      \r\n\r\n    - void setAttribute()\r\n\r\n    - Object getAttribute()\r\n\r\n      \r\n\r\n    - void setMaxInactiveInterval(秒):设置最大有效非活动时间\r\n\r\n    - void setMaxInactiveInterval():获取最大有效非活动时间\r\n\r\n- application 全局对象\r\n\r\n  - String getContextPath()  虚拟路径\r\n  - String getRealPath()  绝对路径\r\n\r\n- config 配置对象\r\n\r\n- page 当前jsp页面对象(相当于java中的this)\r\n\r\n- pageContext JSP页面容器\r\n\r\n- exception 异常对象\r\n\r\n- out:	输出对象，向客户端输出内容\r\n\r\n## 四种范围对象\r\n\r\n- pageContext JSP页面容器           当前页面有效，跳转后无效\r\n\r\n- request 请求对象                          同义词请求有效，其他请求无效（转发后有效，重定向无效）\r\n\r\n- session 会话对象                           同一次会话有效（无论怎么跳转，关闭/切换浏览器无效）\r\n\r\n- application 全局对象                    整个项目运行期间都有效\r\n\r\nObject getAttribute(String name):根据属性名，获得属性值\r\n\r\nvoid setAttribute(String name,Object obj) :设置属性值(新增，修改)\r\n\r\nvoid removeAttribute(String name) :根据属性名删除对象\r\n\r\n## EL表达式\r\n\r\n```jsp\r\n<%@ page import=\"com.edu.entity.Student\" %><%--\r\n  Created by IntelliJ IDEA.\r\n  User: 14327\r\n  Date: 2020/12/1\r\n  Time: 14:03\r\n  To change this template use File | Settings | File Templates.\r\n--%>\r\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" isELIgnored=\"false\" %>\r\n<html>\r\n<head>\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n        <%\r\n            Student student = (Student)request.getAttribute(\"student\");\r\n            out.print(student.getSno()+\"<br/>\");\r\n            out.print(student.getSname()+\"<br/>\");\r\n            out.print(student.getAddress().getHomeAddress()+\"<br/>\");\r\n            out.print(student.getAddress().getSchoolAddress()+\"<br/>\");\r\n        %>\r\n\r\n        ----------------EL--------------<br>\r\n        ${requestScope.student} <br>\r\n        ${requestScope.student.sno} <br>\r\n        ${requestScope.student.sname} <br>\r\n        ${requestScope.student.address.homeAddress} <br>\r\n        ${requestScope.student.address.schoolAddress} <br>\r\n    \r\n    	-------------[\"\"]或者[\'\']运算符 <br>\r\n    	${requestScope.student.address.homeAddress} <br>\r\n        ${requestScope.student.address[\"schoolAddress\"]} <br>\r\n    \r\n    	\r\n        ----------获取map属性------------ <br>\r\n        ${requestScope.map.cn}\r\n        ${requestScope.map[\"us\"]} <br>\r\n\r\n\r\n        ----------运算----------- <br>\r\n        ${3>2}、${3 gt 2}、${3>2 || 3<2} <br>\r\n\r\n        -----------Empty运算符--不存在或者为null为true，存在为false-- <br>\r\n        ${empty requestScope.hello}\r\n        ${empty requestScope.student}<br>\r\n\r\n    	---------隐式对象，略----------\r\n</body>\r\n</html>\r\n\r\n```\r\n\r\n## JSTL\r\n\r\n- 引入jar包\r\n\r\n```xml\r\n    <!--jstl-->\r\n       <dependency>\r\n      <groupId>jstl</groupId>\r\n      <artifactId>jstl</artifactId>\r\n      <version>1.2</version>\r\n    </dependency>\r\n    <dependency>\r\n      <groupId>taglibs</groupId>\r\n      <artifactId>standard</artifactId>\r\n      <version>1.1.2</version>\r\n    </dependency>\r\n  </dependencies>\r\n```\r\n\r\n- jsp页面引入lib设置前缀为c\r\n\r\n```jsp\r\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>\r\n```\r\n\r\n核心标签库:\r\n\r\n- 通用标签库\r\n\r\n  - c:set  1. 作用域(4个范围对象)中给某个变量赋值\r\n\r\n  ```jsp\r\n     	  	<%\r\n              request.setAttribute(\"name\",\"zhangsan\");\r\n          %>\r\n          <%--等价于--%>\r\n          <c:set var=\"name\" value=\"zhangsan\" scope=\"request\"/>\r\n  ```\r\n\r\n  ​	2. 在某个作用域中给对象的属性赋值 不能指定scope\r\n\r\n  ```jsp\r\n  	  	====给对象属性赋值=== <br>\r\n          ${requestScope.student.sname} <br>\r\n          <c:set target=\"${requestScope.student}\" property=\"sname\" value=\"zxs\" />\r\n          ${requestScope.student.sname} <br>\r\n  \r\n  		====给map对象赋值=== <br>\r\n          ${requestScope.map.cn} <br>\r\n          <c:set target=\"${requestScope.map}\" property=\"cn\" value=\"hello\" />\r\n          ${requestScope.map.cn} <br>\r\n  ```\r\n\r\n  - c:out  输出\r\n\r\n  ```jsp\r\n     		=====c:out====== <br>\r\n          ${requestScope.student} <br>\r\n          <c:out value=\"${requestScope.student}\"/> <br>\r\n          显示不存在数据显示默认值<c:out value=\"${requestScope.stu}\" default=\"22-xx\"/>\r\n  \r\n          设置为false可以编译html代码 <br>\r\n          <c:out value=\'<a href=\"https://www.baidu.com\">百度</a>\' escapeXml=\"true\"/> <br>\r\n          <c:out value=\'<a href=\"https://www.baidu.com\">百度</a>\' escapeXml=\"false\"/> <br>\r\n  ```\r\n\r\n  - c:remove  删除属性\r\n\r\n  ```jsp\r\n  <c:remove var=\"a\" scope=\"request\"/>\r\n  ```\r\n\r\n- 条件标签库\r\n\r\n  - c:if\r\n\r\n  ```java\r\n         <c:if test=\"${10>2}\" >\r\n              真\r\n          </c:if>\r\n          <br>\r\n          <%--var 判断结果放的位置 可以加scope=\"request\"表示放到request域--%>\r\n          <c:if test=\"${10>2}\" var=\"result\">\r\n              真\r\n              ${result}\r\n          </c:if>\r\n  ```\r\n\r\n  - c:chose   类似于switch\r\n  - 注意test后面不能有空格 \r\n  - test=\"${10>2}\"   true\r\n  - test=\"${10>2} \"   非true\r\n\r\n  ```jsp\r\n         <c:set var=\"role\" value=\"学生\" scope=\"request\"></c:set>\r\n          <c:choose>\r\n              <c:when test=\"${requestScope.role == \'老师\'}\"> 老师代码</c:when>\r\n              <c:when test=\"${requestScope.role == \'学生\'}\"> 学生代码</c:when>\r\n              <c:otherwise>管理员等其他</c:otherwise>\r\n          </c:choose>\r\n  ```\r\n\r\n- 迭代标签库\r\n\r\n  - c:forEach\r\n\r\n  ```jsp\r\n    		<c:forEach begin=\"0\" end=\"5\" step=\"1\" varStatus=\"status\">\r\n              ${status.index}\r\n              test\r\n          </c:forEach>\r\n          <br>\r\n          <c:forEach var=\"name\" items=\"${requestScope.names}\">\r\n              ${name}\r\n          </c:forEach>\r\n  ```\r\n\r\n## 过滤器(拦截器)\r\n\r\n- 实现Filter接口为过滤器\r\n- init()和destroy()和servlet一样\r\n- 配置filter过滤器\r\n  - dispatcher请求方式:\r\n  - REQUEST: 拦截HTTP请求 get post\r\n  - FORWARD: 只拦截 通过 请求转发方式的请求\r\n  - INCLUDE: 只拦截通过 request.getRequestDispatcher(\"\").include()\r\n  - ERROR: 只拦截< error-page >发出的请求\r\n\r\n```xml\r\n<!-- 配置过滤器-->\r\n<!-- 凡是请求地址/jstl全部交给MyFilter拦截-->\r\n<!-- /* 拦截所有请求-->\r\n  <filter>\r\n    <filter-name>JSTLServlet</filter-name>\r\n    <filter-class>com.edu.filter.MyFilter</filter-class>\r\n  </filter>\r\n  <filter-mapping>\r\n    <filter-name>JSTLServlet</filter-name>\r\n    <url-pattern>/jstl</url-pattern>\r\n  </filter-mapping>\r\n```\r\n\r\n- 通过doFilter()放行\r\n\r\n```java\r\n  @Override\r\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\r\n        System.out.println(\"拦截请求\");\r\n        filterChain.doFilter(servletRequest,servletResponse);//放行\r\n\r\n        System.out.println(\"拦截响应\");\r\n    }\r\n```\r\n\r\n', '2020-11-26 17:50:39', 'https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=1444070507,3220770755&fm=26&gp=0.jpg', '原创', b'1', b'1', b'1', 'JavaWeb复习', '2021-01-21 10:48:12', 7, 7, 1);

-- ----------------------------
-- Table structure for t_blog_tags
-- ----------------------------
DROP TABLE IF EXISTS `t_blog_tags`;
CREATE TABLE `t_blog_tags`  (
  `blogs_id` bigint(20) NOT NULL,
  `tags_id` bigint(20) NOT NULL,
  INDEX `FK5feau0gb4lq47fdb03uboswm8`(`tags_id`) USING BTREE,
  INDEX `FKh4pacwjwofrugxa9hpwaxg6mr`(`blogs_id`) USING BTREE
) ENGINE = MyISAM CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = FIXED;

-- ----------------------------
-- Records of t_blog_tags
-- ----------------------------
INSERT INTO `t_blog_tags` VALUES (8, 6);
INSERT INTO `t_blog_tags` VALUES (8, 2);
INSERT INTO `t_blog_tags` VALUES (8, 1);
INSERT INTO `t_blog_tags` VALUES (9, 3);
INSERT INTO `t_blog_tags` VALUES (9, 2);
INSERT INTO `t_blog_tags` VALUES (9, 1);
INSERT INTO `t_blog_tags` VALUES (10, 1);
INSERT INTO `t_blog_tags` VALUES (10, 3);
INSERT INTO `t_blog_tags` VALUES (16, 13);
INSERT INTO `t_blog_tags` VALUES (16, 12);
INSERT INTO `t_blog_tags` VALUES (21, 14);
INSERT INTO `t_blog_tags` VALUES (21, 19);
INSERT INTO `t_blog_tags` VALUES (22, 13);
INSERT INTO `t_blog_tags` VALUES (22, 12);
INSERT INTO `t_blog_tags` VALUES (23, 2);
INSERT INTO `t_blog_tags` VALUES (25, 14);
INSERT INTO `t_blog_tags` VALUES (30, 29);
INSERT INTO `t_blog_tags` VALUES (30, 2);

-- ----------------------------
-- Table structure for t_comment
-- ----------------------------
DROP TABLE IF EXISTS `t_comment`;
CREATE TABLE `t_comment`  (
  `id` bigint(20) NOT NULL,
  `admin_comment` bit(1) NOT NULL,
  `avatar` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `content` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `create_time` datetime(0) NULL DEFAULT NULL,
  `email` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `nickname` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `blog_id` bigint(20) NULL DEFAULT NULL,
  `parent_comments_id` bigint(20) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `FKke3uogd04j4jx316m1p51e05u`(`blog_id`) USING BTREE,
  INDEX `FKrgyq5g3q3tpdp8t0chg5qht4u`(`parent_comments_id`) USING BTREE
) ENGINE = MyISAM CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of t_comment
-- ----------------------------
INSERT INTO `t_comment` VALUES (24, b'1', 'https://picsum.photos/seed/picsum/100/100', '欢迎评论.....', '2020-09-22 14:24:10', '1432721789@qq.com', '我永远喜欢墨小菊', 16, NULL);
INSERT INTO `t_comment` VALUES (26, b'1', 'https://picsum.photos/seed/picsum/100/100', '欢迎评论', '2020-10-21 18:49:49', '1432721789@qq.com', '我永远喜欢墨小菊', 25, NULL);
INSERT INTO `t_comment` VALUES (27, b'1', 'https://picsum.photos/seed/picsum/100/100', '测试', '2020-10-28 21:02:40', '1432721789@qq.com', '我永远喜欢墨小菊', 25, NULL);
INSERT INTO `t_comment` VALUES (28, b'0', '/images/avatar.jpg', '来了来了。。。', '2020-11-09 20:07:42', '1432721789@qq.com', '傲娇的圣人', 25, 27);

-- ----------------------------
-- Table structure for t_tag
-- ----------------------------
DROP TABLE IF EXISTS `t_tag`;
CREATE TABLE `t_tag`  (
  `id` bigint(20) NOT NULL,
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = MyISAM CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of t_tag
-- ----------------------------
INSERT INTO `t_tag` VALUES (1, 'elasticsearch');
INSERT INTO `t_tag` VALUES (2, 'java');
INSERT INTO `t_tag` VALUES (3, '索引');
INSERT INTO `t_tag` VALUES (4, 'es');
INSERT INTO `t_tag` VALUES (6, 'springboot');
INSERT INTO `t_tag` VALUES (12, 'redis');
INSERT INTO `t_tag` VALUES (13, 'linux');
INSERT INTO `t_tag` VALUES (14, 'mysql');
INSERT INTO `t_tag` VALUES (19, 'mybatis-plus');
INSERT INTO `t_tag` VALUES (20, 'mybatis');
INSERT INTO `t_tag` VALUES (29, 'jsp');

-- ----------------------------
-- Table structure for t_type
-- ----------------------------
DROP TABLE IF EXISTS `t_type`;
CREATE TABLE `t_type`  (
  `id` bigint(20) NOT NULL,
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = MyISAM CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of t_type
-- ----------------------------
INSERT INTO `t_type` VALUES (5, 'elasticsearch');
INSERT INTO `t_type` VALUES (7, 'java');
INSERT INTO `t_type` VALUES (11, 'redis');
INSERT INTO `t_type` VALUES (15, 'mysql');
INSERT INTO `t_type` VALUES (17, 'mybatis-plus');
INSERT INTO `t_type` VALUES (18, 'mybatis');

-- ----------------------------
-- Table structure for t_user
-- ----------------------------
DROP TABLE IF EXISTS `t_user`;
CREATE TABLE `t_user`  (
  `id` bigint(20) NOT NULL,
  `avatar` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `create_time` datetime(0) NULL DEFAULT NULL,
  `email` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `nickname` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `password` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `type` int(11) NULL DEFAULT NULL,
  `update_time` datetime(0) NULL DEFAULT NULL,
  `username` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = MyISAM CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of t_user
-- ----------------------------
INSERT INTO `t_user` VALUES (1, 'https://picsum.photos/seed/picsum/100/100', '2020-09-15 11:06:14', '1432721789@qq.com', '我永远喜欢墨小菊', 'cf79ae6addba60ad018347359bd144d2', 1, '2020-09-15 11:07:04', 'admin');

SET FOREIGN_KEY_CHECKS = 1;
